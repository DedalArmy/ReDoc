@startuml

package fr.imt.ales.redoc.type.hierarchy.build.explorer {
	class Explorer {
		~Logger logger = LogManager.getLogger(Explorer.class)
		+getFiles(String, String)
		~getFiles(String, String)
		-getFiles(URI, String)
		~getFiles(URI, String)
	}
	class FolderLoader {
		~Logger logger = LogManager.getLogger(FolderLoader.class)
		+loadFolder(Path)
		~loadFolder(Path)
	}
}

package fr.imt.ales.redoc.type.hierarchy.build {
	class HierarchyBuilder {
		~Logger logger = LogManager.getLogger(HierarchyBuilder.class)
		~String JAVA_EXTENSION = ".java"
		-List<File> javaFiles
		-List<CompilationUnit> compilationUnits
		-List<JavaPackage> packages
		+getJavaFiles()
		~getJavaFiles()
		+setJavaFiles(List)
		~setJavaFiles(List)
		+getCompilationUnits()
		~getCompilationUnits()
		+setCompilationUnits(List)
		~setCompilationUnits(List)
		+getPackages()
		~getPackages()
		+setPackages(List)
		~setPackages(List)
		+loadJavaFiles(String)
		~loadJavaFiles(String)
		+build()
		~build()
		-exploreHierarchy()
		~exploreHierarchy()
		-getImportedJavaTypes(JavaType)
		~getImportedJavaTypes(JavaType)
		-loadNecessaryData()
		~loadNecessaryData()
		-getPackage(String)
		~getPackage(String)
		-getExtendedJavaTypes(JavaType)
		~getExtendedJavaTypes(JavaType)
		-getImplementedJavaTypes(JavaType)
		~getImplementedJavaTypes(JavaType)
		-exploreRelations()
		~exploreRelations()
		-exploreRelations(JavaPackage, JavaType, FieldDeclaration)
		~exploreRelations(JavaPackage, JavaType, FieldDeclaration)
		-computeParameterTypes(NodeList)
		~computeParameterTypes(NodeList)
		-findClassOrInterface(JavaType, ClassOrInterfaceType)
		~findClassOrInterface(JavaType, ClassOrInterfaceType)
	}
}

package fr.imt.ales.redoc.type.hierarchy.graph {
	class PlantUMLWritter {
		~Logger logger = LogManager.getLogger(PlantUMLWritter.class)
		+writeHierarchy(HierarchyBuilder, String)
		~writeHierarchy(HierarchyBuilder, String)
	}
}

package fr.imt.ales.redoc.type.hierarchy.structure {
	class JavaNestedType {
		-JavaType parent
		+getParent()
		~getParent()
		+setParent(JavaType)
		~setParent(JavaType)
	}
	class JavaPackage {
		-String name
		-List<JavaType> javaTypes
		-List<Relation> relations
		+getName()
		~getName()
		+setName(String)
		~setName(String)
		+getJavaTypes()
		~getJavaTypes()
		+setJavaTypes(List)
		~setJavaTypes(List)
		+getRelations()
		~getRelations()
		+setRelations(List)
		~setRelations(List)
		+findTypeByName(String)
		~findTypeByName(String)
		+findByTypeDeclaration(TypeDeclaration)
		~findByTypeDeclaration(TypeDeclaration)
		+addJavaType(JavaType)
		~addJavaType(JavaType)
		+addRelation(Relation)
		~addRelation(Relation)
		+toString()
		~toString()
	}
	class JavaType {
		-String simpleName
		-JavaPackage jPackage
		-TypeDeclaration<?> typeDeclaration
		-CompilationUnit compilationUnit
		-List<JavaType> jImports
		-List<JavaType> jExtends
		-List<JavaType> jImplements
		-List<JavaNestedType> nestedTypes
		+getSimpleName()
		~getSimpleName()
		+setSimpleName(String)
		~setSimpleName(String)
		+getFullName()
		~getFullName()
		+getjPackage()
		~getjPackage()
		+setjPackage(JavaPackage)
		~setjPackage(JavaPackage)
		+getTypeDeclaration()
		~getTypeDeclaration()
		+setTypeDeclaration(TypeDeclaration)
		~setTypeDeclaration(TypeDeclaration)
		+getjImports()
		~getjImports()
		+setjImports(List)
		~setjImports(List)
		+getjExtends()
		~getjExtends()
		+setjExtends(List)
		~setjExtends(List)
		+getCompilationUnit()
		~getCompilationUnit()
		+setCompilationUnit(CompilationUnit)
		~setCompilationUnit(CompilationUnit)
		+getNestedTypes()
		~getNestedTypes()
		+setNestedTypes(List)
		~setNestedTypes(List)
		+getjImplements()
		~getjImplements()
		+setjImplements(List)
		~setjImplements(List)
		+addImport(JavaType)
		~addImport(JavaType)
		+addExtends(JavaType)
		~addExtends(JavaType)
		+addNestedType(JavaNestedType)
		~addNestedType(JavaNestedType)
		+toString()
		~toString()
		~writeClassOrInterface()
		~writeCOID(StringBuilder, ClassOrInterfaceDeclaration)
		~writeEnum()
		~writeField(FieldDeclaration)
		~writeMethod(MethodDeclaration)
	}
	class ParameterizedJavaType {
		~writeCOID(StringBuilder, ClassOrInterfaceDeclaration)
	}
	class ParameterizedRelation {
		-ClassOrInterfaceType parameterType
		-ParameterizedRelation parameterizedRelation
		+toString()
		~toString()
	}
	class Relation {
		~JavaType endA
		~JavaType endB
		~String name
		+getEndA()
		~getEndA()
		+setEndA(JavaType)
		~setEndA(JavaType)
		+getEndB()
		~getEndB()
		+setEndB(JavaType)
		~setEndB(JavaType)
		+getName()
		~getName()
		+setName(String)
		~setName(String)
		+toString()
		~toString()
	}
}

package main {
	class Main {
		~Logger logger = LogManager.getLogger(Main.class)
		-String PATH = "-p"
		-String PATH2 = "--path"
		-String OUT = "-o"
		-String OUT2 = "--output"
		+main(String[])
		~main(String[])
	}
}

HierarchyBuilder --> JavaPackage : packages
JavaType <|-- JavaNestedType
JavaType <|-- ParameterizedJavaType
Relation <|-- ParameterizedRelation
JavaNestedType --> JavaType : parent
JavaPackage --> JavaType : javaTypes
JavaPackage --> Relation : relations
JavaType --> JavaPackage : jPackage
JavaType --> JavaType : jImports
JavaType --> JavaType : jExtends
JavaType --> JavaType : jImplements
JavaType --> JavaNestedType : nestedTypes
ParameterizedRelation --> ParameterizedRelation : parameterizedRelation
Relation --> JavaType : endA
Relation --> JavaType : endB
@enduml